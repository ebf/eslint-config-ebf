/* eslint-env node */
'use strict';

module.exports = {
  parserOptions: {
    ecmaVersion: 2020,
    sourceType: 'module',
  },

  extends: [
    'eslint:recommended',
  ],

  env: {
    es6: true,
    browser: true,
  },
  
  globals: {
    document: 'readonly',
    navigator: 'readonly',
    window: 'readonly',
  },

  rules: {
    yoda: 'error',
    indent: ['error', 2],
    complexity: ['off', 11],
    semi: ['error', 'always'],
    curly: ['error', 'multi-line'],
    eqeqeq: ['error', 'always', { null: 'ignore' }],
    quotes: ['error', 'single', { avoidEscape: true }],
    'no-var': 'error',
    'no-eval': 'error',
    'no-tabs': 'error',
    'no-console': 'error',
    'no-ternary': 'off',
    'no-undef': 'error',
    'no-shadow': 'error',
    'no-continue': 'error',
    'no-redeclare': 'error',
    'no-lonely-if': 'error',
    'no-undef-init': 'error',
    'no-fallthrough': 'error',
    'no-spaced-func': 'error',
    'no-mixed-spaces-and-tabs': 'error',
    'no-shadow-restricted-names': 'error',
    'no-use-before-define': ['error', { functions: true, classes: true, variables: true }],
    'no-unused-vars': ['error', { vars: 'all', args: 'after-used', ignoreRestSiblings: true }],
    'no-else-return': ['error', { allowElseIf: false }],
    'no-confusing-arrow': ['error', { allowParens: true }],
    'no-empty-function': ['error', { allow: ['arrowFunctions', 'functions', 'methods'] }],
    'semi-style': ['error', 'last'],
    'semi-spacing': ['error', { before: false, after: true }],
    'one-var': ['error', 'never'],
    'prefer-const': ['error', { destructuring: 'any', ignoreReadBeforeAssign: true }],
    'default-case': ['error', { commentPattern: '^no default$' }],
    'object-curly-spacing': ['error', 'always'],
    'object-curly-newline': ['error', {
      ObjectExpression: { minProperties: 6, multiline: true, consistent: true },
      ObjectPattern: { minProperties: 6, multiline: true, consistent: true },
      ImportDeclaration: { minProperties: 6, multiline: true, consistent: true },
      ExportDeclaration: { minProperties: 6, multiline: true, consistent: true },
    }],
    'object-property-newline': ['error', { allowAllPropertiesOnSameLine: true }],
    'no-underscore-dangle': ['error', {
      allow: ['_super'],
      allowAfterThis: false,
      allowAfterSuper: false,
      enforceInMethodNames: true,
    }],
    'comma-spacing': ['error', { before: false, after: true }],
    'comma-dangle': ['error', {
      arrays: 'always-multiline',
      objects: 'always-multiline',
      imports: 'always-multiline',
      exports: 'always-multiline',
      functions: 'always-multiline',
    }],
    'comma-style': ['error', 'last', {
      exceptions: {
        ArrayExpression: false,
        ArrayPattern: false,
        ArrowFunctionExpression: false,
        CallExpression: false,
        FunctionDeclaration: false,
        FunctionExpression: false,
        ImportDeclaration: false,
        ObjectExpression: false,
        ObjectPattern: false,
        VariableDeclaration: false,
        NewExpression: false,
      },
    }],
    'key-spacing': ['error', { beforeColon: false, afterColon: true }],
    'keyword-spacing': ['error', {
      before: true,
      after: true,
      overrides: { return: { after: true }, throw: { after: true }, case: { after: true } },
    }],
    'space-unary-ops': ['error', { words: true, nonwords: false, overrides: { } }],
    'space-infix-ops': 'error',
    'space-in-parens': ['error', 'never'],
    'space-before-function-paren': ['error', { anonymous: 'never', named: 'never', asyncArrow: 'always' }],
    'constructor-super': 'error',
    'consistent-return': 'error',
    'no-param-reassign': 'off',
    'import/no-unresolved': 'off',
    'import/no-extraneous-dependencies': 'off',
  },
};
